/**
 * FalconideAPIV10Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class EmailController {
    /**
     * `Sending Mails` – This API is used for sending emails. Falconide supports REST as well
     * JSON formats for the input
     *
     * @param {string} apiKey Your API Key
     * @param {string} from From email address
     * @param {string} subject Subject of the Email
     * @param {string} content Email body in html (to use attributes to display dynamic values such
     * as name, account number, etc. for ex. [% NAME %] for ATT_NAME , [%
     * AGE %] for ATT_AGE etc.)
     * @param {string} recipients Email addresses for recipients (multiple values allowed)
     * @param {string} fromname (optional) Email Sender name
     * @param {string} replytoid (optional) Reply to email address
     * @param {bool} footer (optional) Set '0' or '1' in order to include footer or not
     * @param {int} template (optional) Email template ID
     * @param {string} attachmentid (optional) specify uploaded attachments id (Multiple
     * attachments are allowed)
     * @param {bool} clicktrack (optional) set ‘0’ or ‘1’ in-order to disable or enable the click-
     * track
     * @param {bool} opentrack (optional) set open-track value to ‘0’ or ‘1’ in-order to disable or
     * enable
     * @param {string} bcc (optional) Email address for bcc
     * @param {string} aTTNAME (optional) Specify attributes followed by ATT_ for recipient to
     * personalized email for ex. ATT_NAME for name, ATT_AGE for age etc.
     * (Multiple attributes are allowed)
     * @param {string} xAPIHEADER (optional) Your defined unique identifier
     * @param {string} tags (optional) To relate each message. Useful for reports.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getFalconapiWebSendRest(
        apiKey,
        from,
        subject,
        content,
        recipients,
        fromname,
        replytoid,
        footer,
        template,
        attachmentid,
        clicktrack,
        opentrack,
        bcc,
        aTTNAME,
        xAPIHEADER,
        tags,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/falconapi/web.send.rest'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            api_key: apiKey,
            from,
            subject,
            content,
            recipients,
            fromname,
            replytoid,
            footer: (footer !== null) ? footer : true,
            template,
            attachmentid,
            clicktrack: (clicktrack !== null) ? clicktrack : true,
            opentrack: (opentrack !== null) ? opentrack : true,
            bcc,
            ATT_NAME: aTTNAME,
            xAPIHEADER,
            tags,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * `Sending Mails` – This API is used for sending emails. Pepipost supports REST as well JSON
     * formats for the input. This is JSON API.
     *
     * @param {Emailv1} data Data in JSON format
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createFalconapiWebSendJson(data, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/falconapi/web.send.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'content-type': 'application/x-www-form-urlencoded; charset=utf-8',
        };

        // remove null values
        _apiHelper.cleanObject(data);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: 'data='+_apiHelper.jsonSerialize(data),
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(JSON.parse(_response.body));
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(JSON.parse(_response.body));
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(JSON.parse(_response.body));
                }
            });
        });
    }

}

module.exports = EmailController;
